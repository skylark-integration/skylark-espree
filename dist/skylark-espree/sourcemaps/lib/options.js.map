{"version":3,"sources":["lib/options.js"],"names":["define","SUPPORTED_VERSIONS","getLatestEcmaVersion","length","getSupportedEcmaVersions","normalizeOptions","options","ecmaVersion","version","Error","includes","normalizeEcmaVersion","sourceType","normalizeSourceType","ranges","range","locations","loc","allowReserved","ecmaFeatures","allowReturnOutsideFunction","Boolean","globalReturn","Object","assign"],"mappings":";;;;;;;AAAAA,UAAU,WAWN,MAAMC,GACF,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,IAOJ,SAASC,IACL,OAAOD,EAAmBA,EAAmBE,OAAS,GAgG1D,OACID,qBAAAA,EACAE,yBA3FJ,WACI,UAAWH,IA2FXI,iBArCJ,SAA0BC,GACtB,MAAMC,EA9CV,SAA8BA,EAAc,GAExC,IAAIC,EAA0B,WAAhBD,EAA2BL,IAAyBK,EAElE,GAAuB,iBAAZC,EACP,MAAM,IAAIC,iFAAiFF,cAS/F,GAJIC,GAAW,OACXA,GAAW,OAGVP,EAAmBS,SAASF,GAC7B,MAAM,IAAIC,MAAM,wBAGpB,OAAOD,EA4BaG,CAAqBL,EAAQC,aAC3CK,EApBV,SAA6BA,EAAa,UACtC,GAAmB,WAAfA,GAA0C,WAAfA,EAC3B,OAAOA,EAGX,GAAmB,aAAfA,EACA,MAAO,SAGX,MAAM,IAAIH,MAAM,uBAWGI,CAAoBP,EAAQM,YACzCE,GAA2B,IAAlBR,EAAQS,MACjBC,GAA4B,IAAhBV,EAAQW,IAE1B,GAAoB,IAAhBV,GAAqBD,EAAQY,cAG7B,MAAM,IAAIT,MAAM,2DAEpB,QAAqC,IAA1BH,EAAQY,eAAkE,kBAA1BZ,EAAQY,cAC/D,MAAM,IAAIT,MAAM,4DAEpB,MAAMS,EAAgC,IAAhBX,IAAqBD,EAAQY,eAAiB,SAC9DC,EAAeb,EAAQa,iBACvBC,EAAoD,aAAvBd,EAAQM,YACvCS,QAAQF,EAAaG,cAEzB,GAAmB,WAAfV,GAA2BL,EAAc,EACzC,MAAM,IAAIE,MAAM,gIAGpB,OAAOc,OAAOC,UAAWlB,GACrBC,YAAAA,EACAK,WAAAA,EACAE,OAAAA,EACAE,UAAAA,EACAE,cAAAA,EACAE,2BAAAA","file":"../../lib/options.js","sourcesContent":["define([],function(){\n\n    /**\n     * @fileoverview A collection of methods for processing Espree's options.\n     * @author Kai Cataldo\n     */\n\n    //------------------------------------------------------------------------------\n    // Helpers\n    //------------------------------------------------------------------------------\n\n    const SUPPORTED_VERSIONS = [\n        3,\n        5,\n        6, // 2015\n        7, // 2016\n        8, // 2017\n        9, // 2018\n        10, // 2019\n        11, // 2020\n        12, // 2021\n        13, // 2022\n        14, // 2023\n        15 // 2024\n    ];\n\n    /**\n     * Get the latest ECMAScript version supported by Espree.\n     * @returns {number} The latest ECMAScript version.\n     */\n    function getLatestEcmaVersion() {\n        return SUPPORTED_VERSIONS[SUPPORTED_VERSIONS.length - 1];\n    }\n\n    /**\n     * Get the list of ECMAScript versions supported by Espree.\n     * @returns {number[]} An array containing the supported ECMAScript versions.\n     */\n    function getSupportedEcmaVersions() {\n        return [...SUPPORTED_VERSIONS];\n    }\n\n    /**\n     * Normalize ECMAScript version from the initial config\n     * @param {(number|\"latest\")} ecmaVersion ECMAScript version from the initial config\n     * @throws {Error} throws an error if the ecmaVersion is invalid.\n     * @returns {number} normalized ECMAScript version\n     */\n    function normalizeEcmaVersion(ecmaVersion = 5) {\n\n        let version = ecmaVersion === \"latest\" ? getLatestEcmaVersion() : ecmaVersion;\n\n        if (typeof version !== \"number\") {\n            throw new Error(`ecmaVersion must be a number or \"latest\". Received value of type ${typeof ecmaVersion} instead.`);\n        }\n\n        // Calculate ECMAScript edition number from official year version starting with\n        // ES2015, which corresponds with ES6 (or a difference of 2009).\n        if (version >= 2015) {\n            version -= 2009;\n        }\n\n        if (!SUPPORTED_VERSIONS.includes(version)) {\n            throw new Error(\"Invalid ecmaVersion.\");\n        }\n\n        return version;\n    }\n\n    /**\n     * Normalize sourceType from the initial config\n     * @param {string} sourceType to normalize\n     * @throws {Error} throw an error if sourceType is invalid\n     * @returns {string} normalized sourceType\n     */\n    function normalizeSourceType(sourceType = \"script\") {\n        if (sourceType === \"script\" || sourceType === \"module\") {\n            return sourceType;\n        }\n\n        if (sourceType === \"commonjs\") {\n            return \"script\";\n        }\n\n        throw new Error(\"Invalid sourceType.\");\n    }\n\n    /**\n     * Normalize parserOptions\n     * @param {Object} options the parser options to normalize\n     * @throws {Error} throw an error if found invalid option.\n     * @returns {Object} normalized options\n     */\n    function normalizeOptions(options) {\n        const ecmaVersion = normalizeEcmaVersion(options.ecmaVersion);\n        const sourceType = normalizeSourceType(options.sourceType);\n        const ranges = options.range === true;\n        const locations = options.loc === true;\n\n        if (ecmaVersion !== 3 && options.allowReserved) {\n\n            // a value of `false` is intentionally allowed here, so a shared config can overwrite it when needed\n            throw new Error(\"`allowReserved` is only supported when ecmaVersion is 3\");\n        }\n        if (typeof options.allowReserved !== \"undefined\" && typeof options.allowReserved !== \"boolean\") {\n            throw new Error(\"`allowReserved`, when present, must be `true` or `false`\");\n        }\n        const allowReserved = ecmaVersion === 3 ? (options.allowReserved || \"never\") : false;\n        const ecmaFeatures = options.ecmaFeatures || {};\n        const allowReturnOutsideFunction = options.sourceType === \"commonjs\" ||\n            Boolean(ecmaFeatures.globalReturn);\n\n        if (sourceType === \"module\" && ecmaVersion < 6) {\n            throw new Error(\"sourceType 'module' is not supported when ecmaVersion < 2015. Consider adding `{ ecmaVersion: 2015 }` to the parser options.\");\n        }\n\n        return Object.assign({}, options, {\n            ecmaVersion,\n            sourceType,\n            ranges,\n            locations,\n            allowReserved,\n            allowReturnOutsideFunction\n        });\n    }\n\n\n    return {\n        getLatestEcmaVersion,\n        getSupportedEcmaVersions,\n        normalizeOptions\n    };\n\n});"]}