{"version":3,"sources":["espree.js"],"names":["define","acorn","jsx","espree","espreeVersion","options","visitorKeys","getLatestEcmaVersion","getSupportedEcmaVersions","parsers","_regular","_jsx","regular","this","Parser","extend","[object Object]","Boolean","ecmaFeatures","version","VisitorKeys","KEYS","Syntax","key","types","Object","create","hasOwnProperty","call","freeze","latestEcmaVersion","supportedEcmaVersions","tokenize","code","get","tokens","assign","parse","name"],"mappings":";;;;;;;AAAAA,QACI,gBACA,4BACA,eACA,gBACA,gBACA,yBACF,SACEC,EACAC,EACAC,EACAC,EACAC,EACAC,GA8DA,MAAOC,qBAAEA,EAAoBC,yBAAEA,GAA6BH,EAItDI,GACFC,SAAU,KACVC,KAAM,KAENC,cAII,OAHsB,OAAlBC,KAAKH,WACLG,KAAKH,SAAWT,EAAMa,OAAOC,OAAOZ,MAEjCU,KAAKH,UAGhBR,UAII,OAHkB,OAAdW,KAAKF,OACLE,KAAKF,KAAOV,EAAMa,OAAOC,OAAOb,IAAOC,MAEpCU,KAAKF,MAGhBK,IAAIX,GAOA,OANeY,QACXZ,GACAA,EAAQa,cACRb,EAAQa,aAAahB,KAGTW,KAAKX,IAAMW,KAAKD,UAgDxC,MAAMO,EAAUf,EAIVgB,EACKd,EAAYe,KAKjBC,EAAU,WACZ,IAAIC,EACAC,KAMJ,IAAKD,IAJwB,mBAAlBE,OAAOC,SACdF,EAAQC,OAAOC,OAAO,OAGdN,EACJK,OAAOE,eAAeC,KAAKR,EAAaG,KACxCC,EAAMD,GAAOA,GAQrB,MAJ6B,mBAAlBE,OAAOI,QACdJ,OAAOI,OAAOL,GAGXA,EAlBI,GAsBTM,EAAoBvB,IAEpBwB,EAAwBvB,IAE9B,OACIwB,SArEJ,SAAkBC,EAAM5B,GACpB,MAAMS,EAASL,EAAQyB,IAAI7B,GAO3B,OAJKA,IAA8B,IAAnBA,EAAQ8B,SACpB9B,EAAUoB,OAAOW,UAAW/B,GAAW8B,QAAQ,KAG5C,IAAIrB,EAAOT,EAAS4B,GAAMD,YA8DjCK,MAhDH,SAAeJ,EAAM5B,GAGlB,OAAO,IAFQI,EAAQyB,IAAI7B,GAEpB,CAAWA,EAAS4B,GAAMI,SA8CjClB,QAAAA,EACAmB,KAvCS,SAwCTlB,YAAAA,EACAE,OAAAA,EACAQ,kBAAAA,EACAC,sBAAAA","file":"../espree.js","sourcesContent":["define([\n    \"skylark-acorn\",\n    \"skylark-acorn/plugins/jsx\",\n    \"./lib/espree\",\n    \"./lib/version\",\n    \"./lib/options\",\n    \"./eslint-visitor-keys\"\n],function(\n    acorn,\n    jsx,\n    espree,\n    espreeVersion,\n    options,\n    visitorKeys\n){\n\n\n    /**\n     * @fileoverview Main Espree file that converts Acorn into Esprima output.\n     *\n     * This file contains code from the following MIT-licensed projects:\n     * 1. Acorn\n     * 2. Babylon\n     * 3. Babel-ESLint\n     *\n     * This file also contains code from Esprima, which is BSD licensed.\n     *\n     * Acorn is Copyright 2012-2015 Acorn Contributors (https://github.com/marijnh/acorn/blob/master/AUTHORS)\n     * Babylon is Copyright 2014-2015 various contributors (https://github.com/babel/babel/blob/master/packages/babylon/AUTHORS)\n     * Babel-ESLint is Copyright 2014-2015 Sebastian McKenzie <sebmck@gmail.com>\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are met:\n     *\n     * * Redistributions of source code must retain the above copyright\n     *   notice, this list of conditions and the following disclaimer.\n     * * Redistributions in binary form must reproduce the above copyright\n     *   notice, this list of conditions and the following disclaimer in the\n     *   documentation and/or other materials provided with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n     * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n     * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n     * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n     * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n     * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n     * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     *\n     * Esprima is Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.\n     *\n     * Redistribution and use in source and binary forms, with or without\n     * modification, are permitted provided that the following conditions are met:\n     *\n     *   * Redistributions of source code must retain the above copyright\n     *     notice, this list of conditions and the following disclaimer.\n     *   * Redistributions in binary form must reproduce the above copyright\n     *     notice, this list of conditions and the following disclaimer in the\n     *     documentation and/or other materials provided with the distribution.\n     *\n     * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n     * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n     * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n     * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n     * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n     * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n     * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n     * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n     * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n     * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n     */\n    /* eslint no-undefined:0, no-use-before-define: 0 */\n\n    const  { getLatestEcmaVersion, getSupportedEcmaVersions } = options;\n\n\n    // To initialize lazily.\n    const parsers = {\n        _regular: null,\n        _jsx: null,\n\n        get regular() {\n            if (this._regular === null) {\n                this._regular = acorn.Parser.extend(espree());\n            }\n            return this._regular;\n        },\n\n        get jsx() {\n            if (this._jsx === null) {\n                this._jsx = acorn.Parser.extend(jsx(), espree());\n            }\n            return this._jsx;\n        },\n\n        get(options) {\n            const useJsx = Boolean(\n                options &&\n                options.ecmaFeatures &&\n                options.ecmaFeatures.jsx\n            );\n\n            return useJsx ? this.jsx : this.regular;\n        }\n    };\n\n    //------------------------------------------------------------------------------\n    // Tokenizer\n    //------------------------------------------------------------------------------\n\n    /**\n     * Tokenizes the given code.\n     * @param {string} code The code to tokenize.\n     * @param {Object} options Options defining how to tokenize.\n     * @returns {Token[]} An array of tokens.\n     * @throws {SyntaxError} If the input code is invalid.\n     * @private\n     */\n    function tokenize(code, options) {\n        const Parser = parsers.get(options);\n\n        // Ensure to collect tokens.\n        if (!options || options.tokens !== true) {\n            options = Object.assign({}, options, { tokens: true }); // eslint-disable-line no-param-reassign\n        }\n\n        return new Parser(options, code).tokenize();\n    }\n\n    //------------------------------------------------------------------------------\n    // Parser\n    //------------------------------------------------------------------------------\n\n    /**\n     * Parses the given code.\n     * @param {string} code The code to tokenize.\n     * @param {Object} options Options defining how to tokenize.\n     * @returns {ASTNode} The \"Program\" AST node.\n     * @throws {SyntaxError} If the input code is invalid.\n     */\n     function parse(code, options) {\n        const Parser = parsers.get(options);\n\n        return new Parser(options, code).parse();\n    }\n\n    //------------------------------------------------------------------------------\n    // Public\n    //------------------------------------------------------------------------------\n\n    const version = espreeVersion;\n    const name = \"espree\";\n\n    /* istanbul ignore next */\n    const VisitorKeys = (function() {\n        return visitorKeys.KEYS;\n    }());\n\n    // Derive node types from VisitorKeys\n    /* istanbul ignore next */\n    const Syntax = (function() {\n        let key,\n            types = {};\n\n        if (typeof Object.create === \"function\") {\n            types = Object.create(null);\n        }\n\n        for (key in VisitorKeys) {\n            if (Object.hasOwnProperty.call(VisitorKeys, key)) {\n                types[key] = key;\n            }\n        }\n\n        if (typeof Object.freeze === \"function\") {\n            Object.freeze(types);\n        }\n\n        return types;\n    }());\n\n\n    const latestEcmaVersion = getLatestEcmaVersion();\n\n    const supportedEcmaVersions = getSupportedEcmaVersions();\n\n    return {\n        tokenize,\n        parse,\n        version,\n        name,\n        VisitorKeys,\n        Syntax,\n        latestEcmaVersion,\n        supportedEcmaVersions\n    }\n\n});\n"]}