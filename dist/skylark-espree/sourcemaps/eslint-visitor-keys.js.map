{"version":3,"sources":["eslint-visitor-keys.js"],"names":["define","KEYS","ArrayExpression","ArrayPattern","ArrowFunctionExpression","AssignmentExpression","AssignmentPattern","AwaitExpression","BinaryExpression","BlockStatement","BreakStatement","CallExpression","CatchClause","ChainExpression","ClassBody","ClassDeclaration","ClassExpression","ConditionalExpression","ContinueStatement","DebuggerStatement","DoWhileStatement","EmptyStatement","ExperimentalRestProperty","ExperimentalSpreadProperty","ExportAllDeclaration","ExportDefaultDeclaration","ExportNamedDeclaration","ExportSpecifier","ExpressionStatement","ForInStatement","ForOfStatement","ForStatement","FunctionDeclaration","FunctionExpression","Identifier","IfStatement","ImportDeclaration","ImportDefaultSpecifier","ImportExpression","ImportNamespaceSpecifier","ImportSpecifier","JSXAttribute","JSXClosingElement","JSXClosingFragment","JSXElement","JSXEmptyExpression","JSXExpressionContainer","JSXFragment","JSXIdentifier","JSXMemberExpression","JSXNamespacedName","JSXOpeningElement","JSXOpeningFragment","JSXSpreadAttribute","JSXSpreadChild","JSXText","LabeledStatement","Literal","LogicalExpression","MemberExpression","MetaProperty","MethodDefinition","NewExpression","ObjectExpression","ObjectPattern","PrivateIdentifier","Program","Property","PropertyDefinition","RestElement","ReturnStatement","SequenceExpression","SpreadElement","StaticBlock","Super","SwitchCase","SwitchStatement","TaggedTemplateExpression","TemplateElement","TemplateLiteral","ThisExpression","ThrowStatement","TryStatement","UnaryExpression","UpdateExpression","VariableDeclaration","VariableDeclarator","WhileStatement","WithStatement","YieldExpression","NODE_TYPES","Object","keys","type","freeze","KEY_BLACKLIST","Set","filterKey","key","has","getKeys","node","filter","unionWith","additionalKeys","retv","assign","prototype","hasOwnProperty","call","add","Array","from"],"mappings":";;;;;;;AAAAA,UAAU,WAQT,MAAMC,GACFC,iBACI,YAEJC,cACI,YAEJC,yBACI,SACA,QAEJC,sBACI,OACA,SAEJC,mBACI,OACA,SAEJC,iBACI,YAEJC,kBACI,OACA,SAEJC,gBACI,QAEJC,gBACI,SAEJC,gBACI,SACA,aAEJC,aACI,QACA,QAEJC,iBACI,cAEJC,WACI,QAEJC,kBACI,KACA,aACA,QAEJC,iBACI,KACA,aACA,QAEJC,uBACI,OACA,aACA,aAEJC,mBACI,SAEJC,qBACAC,kBACI,OACA,QAEJC,kBACAC,0BACI,YAEJC,4BACI,YAEJC,sBACI,WACA,UAEJC,0BACI,eAEJC,wBACI,cACA,aACA,UAEJC,iBACI,WACA,SAEJC,qBACI,cAEJC,gBACI,OACA,QACA,QAEJC,gBACI,OACA,QACA,QAEJC,cACI,OACA,OACA,SACA,QAEJC,qBACI,KACA,SACA,QAEJC,oBACI,KACA,SACA,QAEJC,cACAC,aACI,OACA,aACA,aAEJC,mBACI,aACA,UAEJC,wBACI,SAEJC,kBACI,UAEJC,0BACI,SAEJC,iBACI,WACA,SAEJC,cACI,OACA,SAEJC,mBACI,QAEJC,sBACAC,YACI,iBACA,WACA,kBAEJC,sBACAC,wBACI,cAEJC,aACI,kBACA,WACA,mBAEJC,iBACAC,qBACI,SACA,YAEJC,mBACI,YACA,QAEJC,mBACI,OACA,cAEJC,sBACAC,oBACI,YAEJC,gBACI,cAEJC,WACAC,kBACI,QACA,QAEJC,WACAC,mBACI,OACA,SAEJC,kBACI,SACA,YAEJC,cACI,OACA,YAEJC,kBACI,MACA,SAEJC,eACI,SACA,aAEJC,kBACI,cAEJC,eACI,cAEJC,qBACAC,SACI,QAEJC,UACI,MACA,SAEJC,oBACI,MACA,SAEJC,aACI,YAEJC,iBACI,YAEJC,oBACI,eAEJC,eACI,YAEJC,aACI,QAEJC,SACAC,YACI,OACA,cAEJC,iBACI,eACA,SAEJC,0BACI,MACA,SAEJC,mBACAC,iBACI,SACA,eAEJC,kBACAC,gBACI,YAEJC,cACI,QACA,UACA,aAEJC,iBACI,YAEJC,kBACI,YAEJC,qBACI,gBAEJC,oBACI,KACA,QAEJC,gBACI,OACA,QAEJC,eACI,SACA,QAEJC,iBACI,aAKFC,EAAaC,OAAOC,KAAK3F,GAG/B,IAAK,MAAM4F,KAAQH,EACfC,OAAOG,OAAO7F,EAAK4F,IAEvBF,OAAOG,OAAO7F,GAOd,MAAM8F,EAAgB,IAAIC,KACtB,SACA,kBACA,qBAQJ,SAASC,EAAUC,GACf,OAAQH,EAAcI,IAAID,IAAmB,MAAXA,EAAI,GAyC1C,OACEjG,KAAAA,EACAmG,QAnCF,SAAiBC,GACb,OAAOV,OAAOC,KAAKS,GAAMC,OAAOL,IAmClCM,UAzBF,SAAmBC,GACf,MAAMC,EAECd,OAAOe,UAAWzG,GAEzB,IAAK,MAAM4F,KAAQF,OAAOC,KAAKY,GAC3B,GAAIb,OAAOgB,UAAUC,eAAeC,KAAKJ,EAAMZ,GAAO,CAClD,MAAMD,EAAO,IAAII,IAAIQ,EAAeX,IAEpC,IAAK,MAAMK,KAAOO,EAAKZ,GACnBD,EAAKkB,IAAIZ,GAGbO,EAAKZ,GAAQF,OAAOG,OAAOiB,MAAMC,KAAKpB,SAEtCa,EAAKZ,GAAQF,OAAOG,OAAOiB,MAAMC,KAAKR,EAAeX,KAI7D,OAAOF,OAAOG,OAAOW","file":"../eslint-visitor-keys.js","sourcesContent":["define([],function(){\r\n\t/**\r\n\t * @typedef {{ readonly [type: string]: ReadonlyArray<string> }} VisitorKeys\r\n\t */\r\n\r\n\t/**\r\n\t * @type {VisitorKeys}\r\n\t */\r\n\tconst KEYS = {\r\n\t    ArrayExpression: [\r\n\t        \"elements\"\r\n\t    ],\r\n\t    ArrayPattern: [\r\n\t        \"elements\"\r\n\t    ],\r\n\t    ArrowFunctionExpression: [\r\n\t        \"params\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    AssignmentExpression: [\r\n\t        \"left\",\r\n\t        \"right\"\r\n\t    ],\r\n\t    AssignmentPattern: [\r\n\t        \"left\",\r\n\t        \"right\"\r\n\t    ],\r\n\t    AwaitExpression: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    BinaryExpression: [\r\n\t        \"left\",\r\n\t        \"right\"\r\n\t    ],\r\n\t    BlockStatement: [\r\n\t        \"body\"\r\n\t    ],\r\n\t    BreakStatement: [\r\n\t        \"label\"\r\n\t    ],\r\n\t    CallExpression: [\r\n\t        \"callee\",\r\n\t        \"arguments\"\r\n\t    ],\r\n\t    CatchClause: [\r\n\t        \"param\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    ChainExpression: [\r\n\t        \"expression\"\r\n\t    ],\r\n\t    ClassBody: [\r\n\t        \"body\"\r\n\t    ],\r\n\t    ClassDeclaration: [\r\n\t        \"id\",\r\n\t        \"superClass\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    ClassExpression: [\r\n\t        \"id\",\r\n\t        \"superClass\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    ConditionalExpression: [\r\n\t        \"test\",\r\n\t        \"consequent\",\r\n\t        \"alternate\"\r\n\t    ],\r\n\t    ContinueStatement: [\r\n\t        \"label\"\r\n\t    ],\r\n\t    DebuggerStatement: [],\r\n\t    DoWhileStatement: [\r\n\t        \"body\",\r\n\t        \"test\"\r\n\t    ],\r\n\t    EmptyStatement: [],\r\n\t    ExperimentalRestProperty: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    ExperimentalSpreadProperty: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    ExportAllDeclaration: [\r\n\t        \"exported\",\r\n\t        \"source\"\r\n\t    ],\r\n\t    ExportDefaultDeclaration: [\r\n\t        \"declaration\"\r\n\t    ],\r\n\t    ExportNamedDeclaration: [\r\n\t        \"declaration\",\r\n\t        \"specifiers\",\r\n\t        \"source\"\r\n\t    ],\r\n\t    ExportSpecifier: [\r\n\t        \"exported\",\r\n\t        \"local\"\r\n\t    ],\r\n\t    ExpressionStatement: [\r\n\t        \"expression\"\r\n\t    ],\r\n\t    ForInStatement: [\r\n\t        \"left\",\r\n\t        \"right\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    ForOfStatement: [\r\n\t        \"left\",\r\n\t        \"right\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    ForStatement: [\r\n\t        \"init\",\r\n\t        \"test\",\r\n\t        \"update\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    FunctionDeclaration: [\r\n\t        \"id\",\r\n\t        \"params\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    FunctionExpression: [\r\n\t        \"id\",\r\n\t        \"params\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    Identifier: [],\r\n\t    IfStatement: [\r\n\t        \"test\",\r\n\t        \"consequent\",\r\n\t        \"alternate\"\r\n\t    ],\r\n\t    ImportDeclaration: [\r\n\t        \"specifiers\",\r\n\t        \"source\"\r\n\t    ],\r\n\t    ImportDefaultSpecifier: [\r\n\t        \"local\"\r\n\t    ],\r\n\t    ImportExpression: [\r\n\t        \"source\"\r\n\t    ],\r\n\t    ImportNamespaceSpecifier: [\r\n\t        \"local\"\r\n\t    ],\r\n\t    ImportSpecifier: [\r\n\t        \"imported\",\r\n\t        \"local\"\r\n\t    ],\r\n\t    JSXAttribute: [\r\n\t        \"name\",\r\n\t        \"value\"\r\n\t    ],\r\n\t    JSXClosingElement: [\r\n\t        \"name\"\r\n\t    ],\r\n\t    JSXClosingFragment: [],\r\n\t    JSXElement: [\r\n\t        \"openingElement\",\r\n\t        \"children\",\r\n\t        \"closingElement\"\r\n\t    ],\r\n\t    JSXEmptyExpression: [],\r\n\t    JSXExpressionContainer: [\r\n\t        \"expression\"\r\n\t    ],\r\n\t    JSXFragment: [\r\n\t        \"openingFragment\",\r\n\t        \"children\",\r\n\t        \"closingFragment\"\r\n\t    ],\r\n\t    JSXIdentifier: [],\r\n\t    JSXMemberExpression: [\r\n\t        \"object\",\r\n\t        \"property\"\r\n\t    ],\r\n\t    JSXNamespacedName: [\r\n\t        \"namespace\",\r\n\t        \"name\"\r\n\t    ],\r\n\t    JSXOpeningElement: [\r\n\t        \"name\",\r\n\t        \"attributes\"\r\n\t    ],\r\n\t    JSXOpeningFragment: [],\r\n\t    JSXSpreadAttribute: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    JSXSpreadChild: [\r\n\t        \"expression\"\r\n\t    ],\r\n\t    JSXText: [],\r\n\t    LabeledStatement: [\r\n\t        \"label\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    Literal: [],\r\n\t    LogicalExpression: [\r\n\t        \"left\",\r\n\t        \"right\"\r\n\t    ],\r\n\t    MemberExpression: [\r\n\t        \"object\",\r\n\t        \"property\"\r\n\t    ],\r\n\t    MetaProperty: [\r\n\t        \"meta\",\r\n\t        \"property\"\r\n\t    ],\r\n\t    MethodDefinition: [\r\n\t        \"key\",\r\n\t        \"value\"\r\n\t    ],\r\n\t    NewExpression: [\r\n\t        \"callee\",\r\n\t        \"arguments\"\r\n\t    ],\r\n\t    ObjectExpression: [\r\n\t        \"properties\"\r\n\t    ],\r\n\t    ObjectPattern: [\r\n\t        \"properties\"\r\n\t    ],\r\n\t    PrivateIdentifier: [],\r\n\t    Program: [\r\n\t        \"body\"\r\n\t    ],\r\n\t    Property: [\r\n\t        \"key\",\r\n\t        \"value\"\r\n\t    ],\r\n\t    PropertyDefinition: [\r\n\t        \"key\",\r\n\t        \"value\"\r\n\t    ],\r\n\t    RestElement: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    ReturnStatement: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    SequenceExpression: [\r\n\t        \"expressions\"\r\n\t    ],\r\n\t    SpreadElement: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    StaticBlock: [\r\n\t        \"body\"\r\n\t    ],\r\n\t    Super: [],\r\n\t    SwitchCase: [\r\n\t        \"test\",\r\n\t        \"consequent\"\r\n\t    ],\r\n\t    SwitchStatement: [\r\n\t        \"discriminant\",\r\n\t        \"cases\"\r\n\t    ],\r\n\t    TaggedTemplateExpression: [\r\n\t        \"tag\",\r\n\t        \"quasi\"\r\n\t    ],\r\n\t    TemplateElement: [],\r\n\t    TemplateLiteral: [\r\n\t        \"quasis\",\r\n\t        \"expressions\"\r\n\t    ],\r\n\t    ThisExpression: [],\r\n\t    ThrowStatement: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    TryStatement: [\r\n\t        \"block\",\r\n\t        \"handler\",\r\n\t        \"finalizer\"\r\n\t    ],\r\n\t    UnaryExpression: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    UpdateExpression: [\r\n\t        \"argument\"\r\n\t    ],\r\n\t    VariableDeclaration: [\r\n\t        \"declarations\"\r\n\t    ],\r\n\t    VariableDeclarator: [\r\n\t        \"id\",\r\n\t        \"init\"\r\n\t    ],\r\n\t    WhileStatement: [\r\n\t        \"test\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    WithStatement: [\r\n\t        \"object\",\r\n\t        \"body\"\r\n\t    ],\r\n\t    YieldExpression: [\r\n\t        \"argument\"\r\n\t    ]\r\n\t};\r\n\r\n\t// Types.\r\n\tconst NODE_TYPES = Object.keys(KEYS);\r\n\r\n\t// Freeze the keys.\r\n\tfor (const type of NODE_TYPES) {\r\n\t    Object.freeze(KEYS[type]);\r\n\t}\r\n\tObject.freeze(KEYS);\r\n\r\n\t/**\r\n\t * @typedef {import('./visitor-keys.js').VisitorKeys} VisitorKeys\r\n\t */\r\n\r\n\t// List to ignore keys.\r\n\tconst KEY_BLACKLIST = new Set([\r\n\t    \"parent\",\r\n\t    \"leadingComments\",\r\n\t    \"trailingComments\"\r\n\t]);\r\n\r\n\t/**\r\n\t * Check whether a given key should be used or not.\r\n\t * @param {string} key The key to check.\r\n\t * @returns {boolean} `true` if the key should be used.\r\n\t */\r\n\tfunction filterKey(key) {\r\n\t    return !KEY_BLACKLIST.has(key) && key[0] !== \"_\";\r\n\t}\r\n\r\n\t/**\r\n\t * Get visitor keys of a given node.\r\n\t * @param {object} node The AST node to get keys.\r\n\t * @returns {readonly string[]} Visitor keys of the node.\r\n\t */\r\n\tfunction getKeys(node) {\r\n\t    return Object.keys(node).filter(filterKey);\r\n\t}\r\n\r\n\t// Disable valid-jsdoc rule because it reports syntax error on the type of @returns.\r\n\t// eslint-disable-next-line valid-jsdoc\r\n\t/**\r\n\t * Make the union set with `KEYS` and given keys.\r\n\t * @param {VisitorKeys} additionalKeys The additional keys.\r\n\t * @returns {VisitorKeys} The union set.\r\n\t */\r\n\tfunction unionWith(additionalKeys) {\r\n\t    const retv = /** @type {{\r\n\t        [type: string]: ReadonlyArray<string>\r\n\t    }} */ (Object.assign({}, KEYS));\r\n\r\n\t    for (const type of Object.keys(additionalKeys)) {\r\n\t        if (Object.prototype.hasOwnProperty.call(retv, type)) {\r\n\t            const keys = new Set(additionalKeys[type]);\r\n\r\n\t            for (const key of retv[type]) {\r\n\t                keys.add(key);\r\n\t            }\r\n\r\n\t            retv[type] = Object.freeze(Array.from(keys));\r\n\t        } else {\r\n\t            retv[type] = Object.freeze(Array.from(additionalKeys[type]));\r\n\t        }\r\n\t    }\r\n\r\n\t    return Object.freeze(retv);\r\n\t}\r\n\r\n\treturn  {\r\n\t  KEYS,\r\n\t  getKeys,\r\n\t  unionWith\r\n\t};\r\n\r\n});"]}